name: PR Approval via Port

on:
  workflow_dispatch:
    inputs:
      pr_url:
        description: 'Pull Request URL'
        required: true
        type: string
      pr_number:
        description: 'Pull Request Number'
        required: true
        type: string
      approval_comment:
        description: 'Approval Comment'
        required: false
        type: string
        default: 'Approved via Port üöÄ'
      run_id:
        description: 'Port Run ID'
        required: true
        type: string

permissions:
  contents: read
  pull-requests: write

jobs:
  approve-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Debug Inputs
        run: |
          echo "üîç Debug Info:"
          echo "PR URL: ${{ inputs.pr_url }}"
          echo "PR Number: ${{ inputs.pr_number }}"
          echo "Run ID: ${{ inputs.run_id }}"
          echo "Approval Comment: '${{ inputs.approval_comment }}'"
          echo "Comment Length: ${#comment}"
        env:
          comment: ${{ inputs.approval_comment }}

      - name: Get Port Token
        id: port-auth
        run: |
          echo "üîê Getting Port access token..."
          
          TOKEN=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d '{"clientId": "${{ secrets.PORT_CLIENT_ID }}", "clientSecret": "${{ secrets.PORT_CLIENT_SECRET }}"}' \
            "https://api.getport.io/v1/auth/access_token" | jq -r '.accessToken')
          
          if [ "$TOKEN" != "null" ] && [ ! -z "$TOKEN" ]; then
            echo "‚úÖ Port authentication successful"
            echo "TOKEN=$TOKEN" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Port authentication failed"
            exit 1
          fi

      - name: Extract Repository Info
        id: repo-info
        run: |
          # Extract owner and repo from PR URL
          REPO_PATH=$(echo "${{ inputs.pr_url }}" | sed -n 's|https://github.com/\([^/]*/[^/]*\)/pull/.*|\1|p')
          OWNER=$(echo "$REPO_PATH" | cut -d'/' -f1)
          REPO=$(echo "$REPO_PATH" | cut -d'/' -f2)
          
          echo "OWNER=$OWNER" >> $GITHUB_OUTPUT
          echo "REPO=$REPO" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Repository: $OWNER/$REPO"

      - name: Approve Pull Request
        id: approve
        run: |
          echo "üöÄ Approving PR #${{ inputs.pr_number }}"
          
          # Set default comment if empty or null
          COMMENT="${{ inputs.approval_comment }}"
          if [ -z "$COMMENT" ] || [ "$COMMENT" = "null" ]; then
            COMMENT="Approved via Port üöÄ"
          fi
          
          echo "Using comment: $COMMENT"
          
          # Create approval review
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" \
            -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ steps.repo-info.outputs.OWNER }}/${{ steps.repo-info.outputs.REPO }}/pulls/${{ inputs.pr_number }}/reviews" \
            -d "{
              \"event\": \"APPROVE\",
              \"body\": \"$COMMENT\"
            }")
          
          HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
          BODY=$(echo "$RESPONSE" | sed '/HTTP_CODE:/d')
          
          echo "Response Code: $HTTP_CODE"
          echo "Response Body: $BODY"
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ PR approved successfully!"
            echo "SUCCESS=true" >> $GITHUB_OUTPUT
            echo "MESSAGE=Pull request approved successfully!" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Failed to approve PR (HTTP: $HTTP_CODE)"
            # Clean the error message for output
            CLEAN_ERROR=$(echo "$BODY" | tr '\n' ' ' | tr '"' "'" | head -c 200)
            echo "SUCCESS=false" >> $GITHUB_OUTPUT
            echo "MESSAGE=Failed to approve PR: HTTP $HTTP_CODE - $CLEAN_ERROR" >> $GITHUB_OUTPUT
          fi

      - name: Update Port - Success
        if: steps.approve.outputs.SUCCESS == 'true'
        run: |
          echo "üéâ Updating Port with success..."
          
          COMMENT="${{ inputs.approval_comment }}"
          if [ -z "$COMMENT" ] || [ "$COMMENT" = "null" ]; then
            COMMENT="Approved via Port üöÄ"
          fi
          
          curl -s -X PATCH \
            -H "Authorization: Bearer ${{ steps.port-auth.outputs.TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"status\": \"SUCCESS\",
              \"message\": {
                \"run_status\": \"‚úÖ **Pull Request Approved!**\\n\\nüéâ PR #${{ inputs.pr_number }} approved with comment: \\\"$COMMENT\\\"\\n\\nüîó [View PR](${{ inputs.pr_url }})\"
              }
            }" \
            "https://api.getport.io/v1/actions/runs/${{ inputs.run_id }}"

      - name: Update Port - Failure
        if: steps.approve.outputs.SUCCESS == 'false'
        run: |
          echo "üí• Updating Port with failure..."
          
          curl -s -X PATCH \
            -H "Authorization: Bearer ${{ steps.port-auth.outputs.TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"status\": \"FAILURE\", 
              \"message\": {
                \"run_status\": \"‚ùå **Failed to Approve PR**\\n\\n${{ steps.approve.outputs.MESSAGE }}\\n\\nPlease check GitHub permissions and try again.\"
              }
            }" \
            "https://api.getport.io/v1/actions/runs/${{ inputs.run_id }}"
          
          exit 1

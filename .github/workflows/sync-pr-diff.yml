name: Sync PR Diff to Port (Debug)

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sync-pr-diff:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install requests

      - name: Debug Environment Variables
        env:
          PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
          PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
        run: |
          echo "üîç Debug Info:"
          echo "PR Number: ${{ github.event.pull_request.number }}"
          echo "PR ID: ${{ github.event.pull_request.id }}"
          echo "CLIENT_ID present: $([ ! -z "$PORT_CLIENT_ID" ] && echo 'Yes' || echo 'No')"
          echo "CLIENT_SECRET present: $([ ! -z "$PORT_CLIENT_SECRET" ] && echo 'Yes' || echo 'No')"
          echo "CLIENT_ID length: ${#PORT_CLIENT_ID}"
          echo "CLIENT_SECRET length: ${#PORT_CLIENT_SECRET}"

      - name: Process PR and update Port
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
          PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_ID: ${{ github.event.pull_request.id }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_HTML_URL: ${{ github.event.pull_request.html_url }}
          PR_ADDITIONS: ${{ github.event.pull_request.additions }}
          PR_DELETIONS: ${{ github.event.pull_request.deletions }}
          PR_CHANGED_FILES: ${{ github.event.pull_request.changed_files }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          python3 << 'EOF'
          import os
          import requests
          import json
          import subprocess
          import sys
          
          def debug_print(message):
              """Print debug message with emoji"""
              print(f"üîß DEBUG: {message}")
          
          def get_pr_files():
              """Get list of changed files using gh CLI"""
              debug_print("Getting changed files...")
              try:
                  result = subprocess.run(
                      ['gh', 'pr', 'diff', os.environ['PR_NUMBER'], '--name-only'],
                      capture_output=True,
                      text=True,
                      check=True
                  )
                  files = [f.strip() for f in result.stdout.split('\n') if f.strip()]
                  debug_print(f"Found {len(files)} changed files")
                  return files
              except subprocess.CalledProcessError as e:
                  debug_print(f"Error getting files: {e}")
                  return []
          
          def get_pr_diff():
              """Get PR diff using gh CLI"""
              debug_print("Getting PR diff...")
              try:
                  result = subprocess.run(
                      ['gh', 'pr', 'diff', os.environ['PR_NUMBER']],
                      capture_output=True,
                      text=True,
                      check=True
                  )
                  # Truncate if too long
                  diff = result.stdout
                  if len(diff) > 8000:
                      diff = diff[:8000] + "\n\n... (diff truncated)"
                  debug_print(f"Got diff, length: {len(diff)} chars")
                  return diff
              except subprocess.CalledProcessError as e:
                  debug_print(f"Error getting diff: {e}")
                  return "Error retrieving diff"
          
          def create_diff_content():
              """Create formatted markdown content"""
              debug_print("Creating formatted content...")
              files = get_pr_files()
              diff = get_pr_diff()
              
              content = f"""## üìä Pull Request: {os.environ['PR_TITLE']}
          
          ### üìà Change Statistics
          - **Files Changed:** {os.environ['PR_CHANGED_FILES']}
          - **Lines Added:** +{os.environ['PR_ADDITIONS']}
          - **Lines Deleted:** -{os.environ['PR_DELETIONS']}
          
          ### üìÅ Modified Files
          """
              
              for file in files[:20]:  # Limit to first 20 files
                  content += f"- `{file}`\n"
              
              if len(files) > 20:
                  content += f"- ... and {len(files) - 20} more files\n"
              
              content += f"""
          ### üîç Code Changes
          
          ```diff
          {diff}
          ```
          
          [üìñ View Full Diff on GitHub]({os.environ['PR_HTML_URL']}/files)
          """
              
              return content, files
          
          def get_port_token():
              """Get Port access token with detailed error handling"""
              debug_print("Attempting Port authentication...")
              
              client_id = os.environ.get('PORT_CLIENT_ID', '').strip()
              client_secret = os.environ.get('PORT_CLIENT_SECRET', '').strip()
              
              if not client_id or not client_secret:
                  raise Exception("PORT_CLIENT_ID or PORT_CLIENT_SECRET is empty")
              
              debug_print(f"Client ID length: {len(client_id)}")
              debug_print(f"Client Secret length: {len(client_secret)}")
              
              payload = {
                  'client_id': client_id,
                  'client_secret': client_secret
              }
              
              debug_print("Sending authentication request...")
              
              try:
                  response = requests.post(
                      'https://api.getport.io/v1/auth/access_token',
                      json=payload,
                      timeout=30
                  )
                  
                  debug_print(f"Auth response status: {response.status_code}")
                  
                  if response.status_code == 200:
                      token = response.json().get('accessToken')
                      debug_print("‚úÖ Authentication successful!")
                      return token
                  else:
                      debug_print(f"‚ùå Auth failed: {response.status_code}")
                      debug_print(f"Response: {response.text}")
                      raise Exception(f"Port authentication failed: {response.status_code} - {response.text}")
                      
              except requests.exceptions.RequestException as e:
                  debug_print(f"‚ùå Network error: {e}")
                  raise Exception(f"Network error during authentication: {e}")
          
          def update_port_entity():
              """Update Port entity with diff content"""
              debug_print("Starting Port entity update...")
              
              try:
                  diff_content, files = create_diff_content()
                  token = get_port_token()
                  
                  url = f"https://api.getport.io/v1/blueprints/githubPullRequest/entities/{os.environ['PR_ID']}"
                  debug_print(f"Target URL: {url}")
                  
                  payload = {
                      'properties': {
                          'diffContent': diff_content,
                          'additions': int(os.environ['PR_ADDITIONS']),
                          'deletions': int(os.environ['PR_DELETIONS']),
                          'changedFiles': int(os.environ['PR_CHANGED_FILES']),
                          'filesChanged': files
                      }
                  }
                  
                  headers = {
                      'Authorization': f'Bearer {token}',
                      'Content-Type': 'application/json'
                  }
                  
                  debug_print("Sending entity update request...")
                  response = requests.patch(url, json=payload, headers=headers, timeout=30)
                  
                  debug_print(f"Update response status: {response.status_code}")
                  
                  if response.status_code in [200, 201]:
                      print(f"‚úÖ Successfully updated Port entity {os.environ['PR_ID']}")
                  else:
                      print(f"‚ùå Failed to update Port entity: {response.status_code}")
                      print(f"Response: {response.text}")
                      return False
                      
                  return True
                  
              except Exception as e:
                  print(f"‚ùå Error in update_port_entity: {str(e)}")
                  return False
          
          # Main execution
          if __name__ == "__main__":
              debug_print("=== Starting PR Diff Sync ===")
              
              try:
                  success = update_port_entity()
                  if success:
                      debug_print("=== Process completed successfully ===")
                      sys.exit(0)
                  else:
                      debug_print("=== Process failed ===")
                      sys.exit(1)
              except Exception as e:
                  print(f"‚ùå Fatal error: {str(e)}")
                  sys.exit(1)
          EOF

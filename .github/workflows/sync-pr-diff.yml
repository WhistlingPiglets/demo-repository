name: Sync PR Diff to Port

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sync-pr-diff:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: pip install requests

      - name: Process PR and update Port
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
          PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_ID: ${{ github.event.pull_request.id }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_HTML_URL: ${{ github.event.pull_request.html_url }}
          PR_ADDITIONS: ${{ github.event.pull_request.additions }}
          PR_DELETIONS: ${{ github.event.pull_request.deletions }}
          PR_CHANGED_FILES: ${{ github.event.pull_request.changed_files }}
        run: |
          python3 << 'EOF'
          import os
          import requests
          import subprocess
          import sys
          
          def get_pr_files():
              try:
                  result = subprocess.run(
                      ['gh', 'pr', 'diff', os.environ['PR_NUMBER'], '--name-only'],
                      capture_output=True, text=True, check=True
                  )
                  return [f.strip() for f in result.stdout.split('\n') if f.strip()]
              except subprocess.CalledProcessError:
                  return []
          
          def get_pr_diff():
              try:
                  result = subprocess.run(
                      ['gh', 'pr', 'diff', os.environ['PR_NUMBER']],
                      capture_output=True, text=True, check=True
                  )
                  diff = result.stdout
                  if len(diff) > 8000:
                      diff = diff[:8000] + "\n\n... (diff truncated)"
                  return diff
              except subprocess.CalledProcessError:
                  return "Error retrieving diff"
          
          def create_diff_content():
              files = get_pr_files()
              diff = get_pr_diff()
              
              content = f"""## üìä Pull Request: {os.environ['PR_TITLE']}
          
          ### üìà Change Statistics
          - **Files Changed:** {os.environ['PR_CHANGED_FILES']}
          - **Lines Added:** +{os.environ['PR_ADDITIONS']}
          - **Lines Deleted:** -{os.environ['PR_DELETIONS']}
          
          ### üìÅ Modified Files
          """
              
              for file in files[:20]:
                  content += f"- `{file}`\n"
              
              if len(files) > 20:
                  content += f"- ... and {len(files) - 20} more files\n"
              
              content += f"""
          ### üîç Code Changes
          
          ```diff
          {diff}
          ```
          
          [üìñ View Full Diff on GitHub]({os.environ['PR_HTML_URL']}/files)
          """
              
              return content, files
          
          def get_port_token():
              print("üîß Authenticating with Port...")
              
              client_id = os.environ.get('PORT_CLIENT_ID', '').strip()
              client_secret = os.environ.get('PORT_CLIENT_SECRET', '').strip()
              
              if not client_id or not client_secret:
                  raise Exception("PORT_CLIENT_ID or PORT_CLIENT_SECRET is empty")
              
              payload = {
                  'clientId': client_id,
                  'clientSecret': client_secret
              }
              
              response = requests.post(
                  'https://api.getport.io/v1/auth/access_token',
                  json=payload,
                  timeout=30
              )
              
              if response.status_code == 200:
                  print("‚úÖ Port authentication successful!")
                  return response.json().get('accessToken')
              else:
                  raise Exception(f"Port auth failed: {response.status_code} - {response.text}")
          
          def update_port_entity():
              print("üöÄ Starting Port entity update...")
              
              diff_content, files = create_diff_content()
              token = get_port_token()
              
              url = f"https://api.getport.io/v1/blueprints/githubPullRequest/entities/{os.environ['PR_ID']}"
              
              payload = {
                  'properties': {
                      'diffContent': diff_content,
                      'additions': int(os.environ['PR_ADDITIONS']),
                      'deletions': int(os.environ['PR_DELETIONS']),
                      'changedFiles': int(os.environ['PR_CHANGED_FILES']),
                      'filesChanged': files
                  }
              }
              
              headers = {
                  'Authorization': f'Bearer {token}',
                  'Content-Type': 'application/json'
              }
              
              response = requests.patch(url, json=payload, headers=headers, timeout=30)
              
              if response.status_code in [200, 201]:
                  print(f"‚úÖ Successfully updated Port entity {os.environ['PR_ID']}")
                  return True
              else:
                  print(f"‚ùå Failed to update Port entity: {response.status_code}")
                  print(f"Response: {response.text}")
                  return False
          
          # Main execution
          try:
              if update_port_entity():
                  print("üéâ Process completed successfully!")
                  sys.exit(0)
              else:
                  print("üí• Process failed!")
                  sys.exit(1)
          except Exception as e:
              print(f"‚ùå Fatal error: {str(e)}")
              sys.exit(1)
          EOF
